@node Installation, Configuration, Concept Index, Top
@appendix Installing PSPP
@cindex installation
@cindex PSPP, installing

@cindex GNU C compiler
@cindex gcc
@cindex compiler, recommended
@cindex compiler, gcc
PSPP conforms to the GNU Coding Standards.  PSPP is written in, and
requires for proper operation, ANSI/ISO C.  You might want to
additionally note the following points:

@itemize @bullet
@item
The compiler and linker must allow for significance of several
characters in external identifiers.  The exact number is unknown but at
least 31 is recommended.

@item
The @code{int} type must be 32 bits or wider.

@item
The recommended compiler is gcc 2.7.2.1 or later, but any ANSI compiler
will do if it fits the above criteria.
@end itemize

Many UNIX variants should work out-of-the-box, as PSPP uses GNU
autoconf to detect differences between environments.  Please report any
problems with compilation of PSPP under UNIX and UNIX-like operating
systems---portability is a major concern of the author.

The pages below give specific instructions for installing PSPP
on each type of system mentioned above.

@menu
* UNIX installation::           Installing on UNIX-like environments.
@end menu

@node UNIX installation,  , Installation, Installation
@section UNIX installation
@cindex UNIX, installing PSPP under
@cindex installation, under UNIX
@noindent
To install PSPP under a UNIX-like operating system, follow the steps
below in order.  Some of the text below was taken directly from various
Free Software Foundation sources.

@enumerate
@item
@code{cd} to the directory containing the PSPP source.

@cindex configure, GNU
@cindex GNU configure
@item
Type @samp{./configure} to configure for your particular operating
system and compiler.  Running @code{configure} takes a while.  While
running, it displays some messages telling which features it is checking
for.

You can optionally supply some options to @code{configure} to
give it hints about how to do its job.  Type @code{./configure --help}
to see a list of options.  One of the most useful options is
@samp{--with-checker}, which enables the use of the Checker memory
debugger under supported operating systems.  Checker must already be
installed to use this option.  Do not use @samp{--with-checker} if you
are not debugging PSPP itself.

@cindex @file{Makefile}
@cindex @file{config.h}
@cindex @file{pref.h}
@cindex makefile
@item
(optional) Edit @file{Makefile}, @file{config.h}, and @file{pref.h}.
These files are produced by @code{configure}.  Note that most PSPP
settings can be changed at runtime.

@file{pref.h} is only generated by @code{configure} if it does not
already exist.  (It's copied from @file{prefh.orig}.)

@cindex compiling
@item
Type @samp{make} to compile the package.  If there are any errors during
compilation, try to fix them.  If modifications are necessary to compile
correctly under your configuration, contact the author.
@xref{Bugs,,Submitting Bug Reports}, for details.

@cindex self-tests, running
@item
Type @samp{make check} to run self-tests on the compiled PSPP package.

@cindex installation
@cindex PSPP, installing
@cindex @file{/usr/local/share/pspp/}
@cindex @file{/usr/local/bin/}
@cindex @file{/usr/local/info/}
@cindex documentation, installing
@item
Become the superuser and type @samp{make install} to install the
PSPP binaries, by default in @file{/usr/local/bin/}.  The
directory @file{/usr/local/share/pspp/} is created and populated with
files needed by PSPP at runtime.  This step will also cause the
PSPP documentation to be installed in @file{/usr/local/info/},
but only if that directory already exists.

@item
(optional) Type @samp{make clean} to delete the PSPP binaries
from the source tree.
@end enumerate
@setfilename ignored
